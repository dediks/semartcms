#import */*.graphql

extend type Query {    
    #sihgle data
    customer(id: ID @eq): Customer @find 

    #all data
    customers: [Customer!]! @all

    #all data paginate
    customersPaginate: [Customer!]! @paginate(defaultCount: 10) 

    #get most selected top data
    customersTop(total: Int!, order_by: String!, director: String!): [Customer!]!
      @paginate(defaultCount: 10)

    #get somme randomized data
    customerGetRandom(total: Int!): [Customer!]! @field(resolver: "CustomerQuery@getRandom")

    #get some data by paramaters
    customerFindBy(identifier: String!, operator: String!, value: String!): Customer!
      @field(resolver: "CustomerQuery@findBy")

    #get all data with pagination
    customersPage(page: Int!, size: Int!): CustomersPage
      @field(resolver: "CustomerQuery@getPage")
    
    #search a data
    customersSearch(col_name: String!, kw: String!): [Customer!]!
      @field(resolver: "CustomerQuery@search")
}


type CustomersPage {
    customers: [Customer]
    hasMore: Boolean
}

extend type Mutation {
    createCustomer(
      	name:String

    ): Customer! @create
    
    updateCustomer(
      id: ID!
      	name:String

      ): Customer @update

    upsertCustomer(
      id: ID! 
      	name:String

      ): Customer @upsert

    deleteCustomer(id: ID!): Customer @delete
}
# type 

type Customer {
    id: ID!
    	name:String
	orders: [Order] @hasMany

    created_at: DateTime!
    updated_at: DateTime!
}

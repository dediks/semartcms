#import */*.graphql

extend type Query {    
    #sihgle data
    category(id: ID @eq): Category @find 

    #all data
    categories: [Category!]! @all

    #all data paginate
    categoriesPaginate: [Category!]! @paginate(defaultCount: 10) 

    #get most selected top data
    categoriesTop(total: Int!, order_by: String!, director: String!): [Category!]!
      @paginate(defaultCount: 10)

    #get somme randomized data
    categoryGetRandom(total: Int!): [Category!]! @field(resolver: "CategoryQuery@getRandom")

    #get some data by paramaters
    categoryFindBy(identifier: String!, operator: String!, value: String!): Category!
      @field(resolver: "CategoryQuery@findBy")

    #get all data with pagination
    categoriesPage(page: Int!, size: Int!): CategoriesPage
      @field(resolver: "CategoryQuery@getPage")
    
    #search a data
    categoriesSearch(col_name: String!, kw: String!): [Category!]!
      @field(resolver: "CategoryQuery@search")
}


type CategoriesPage {
    categories: [Category]
    hasMore: Boolean
}

extend type Mutation {
    createCategory(
      	name:String

    ): Category! @create
    
    updateCategory(
      id: ID!
      	name:String

      ): Category @update

    upsertCategory(
      id: ID! 
      	name:String

      ): Category @upsert

    deleteCategory(id: ID!): Category @delete
}
# type 

type Category {
    id: ID!
    	name:String
	books: [Book] @belongsToMany

    created_at: DateTime!
    updated_at: DateTime!
}

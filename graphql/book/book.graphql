#import */*.graphql

extend type Query {    
    #sihgle data
    book(id: ID @eq): Book @find 

    #all data
    books: [Book!]! @all

    #all data paginate
    booksPaginate: [Book!]! @paginate(defaultCount: 10) 

    #get most selected top data
    booksTop(total: Int!, order_by: String!, director: String!): [Book!]!
      @paginate(defaultCount: 10)

    #get somme randomized data
    bookGetRandom(total: Int!): [Book!]! @field(resolver: "BookQuery@getRandom")

    #get some data by paramaters
    bookFindBy(identifier: String!, operator: String!, value: String!): Book!
      @field(resolver: "BookQuery@findBy")

    #get all data with pagination
    booksPage(page: Int!, size: Int!): BooksPage
      @field(resolver: "BookQuery@getPage")
    
    #search a data
    booksSearch(col_name: String!, kw: String!): [Book!]!
      @field(resolver: "BookQuery@search")
}


type BooksPage {
    books: [Book]
    hasMore: Boolean
}

extend type Mutation {
    createBook(
      	title:String

    ): Book! @create
    
    updateBook(
      id: ID!
      	title:String

      ): Book @update

    upsertBook(
      id: ID! 
      	title:String

      ): Book @upsert

    deleteBook(id: ID!): Book @delete
}
# type 

type Book {
    id: ID!
    	title:String
	orders: [Order] @belongsToMany

    created_at: DateTime!
    updated_at: DateTime!
}

#import */*.graphql

extend type Query {
    books: [Book!]! @paginate(defaultCount: 10)
    allBooks: [Book!]! @all

    topBooks: [Book!]! @paginate(defaultCount: 10)
    book(id: ID @eq): Book @find

    getRandomBook(total: Int!): [Book!]! @field(resolver: "BookQuery@getRandom")
    findBookBy(identifier: String!, operator: String!, value: String!): Book!
        @field(resolver: "BookQuery@findBy")

    booksPage(page: Int!, size: Int!): BooksPage
        @field(resolver: "BookQuery@getPage")

    postsSearch(search: String @search(within: "my.index")): [Post!]! @paginate
}

extend type Mutation {
    createBook(
        title: String!
        slug: String!
        description: String
        author: String
        publisher: String
        price: Float!
        views: Int
        stock: Int
        status: String
        cover: String
    ): Book! @create

    updateBook(
        id: ID!
        title: String!
        slug: String!
        description: String
        author: String
        publisher: String
        price: Float!
        views: Int
        stock: Int
        status: String
        cover: String
    ): Book @update

    upsertBook(
        id: ID!
        title: String!
        slug: String!
        description: String
        author: String
        publisher: String
        price: Float!
        views: Int
        stock: Int
        status: String
        cover: String
    ): Book @upsert

    deleteBook(id: ID!): Book @delete
}
# type

type BooksPage {
    books: [Book]
    hasMore: Boolean
}

type Book {
    id: ID!
    title: String!
    slug: String!
    description: String
    author: String
    publisher: String
    price: Float!
    views: Int
    stock: Int
    status: String
    cover: String
    categories: [Category] @belongsToMany(type: "paginator")
    orders: [Order] @belongsToMany(type: "paginator")

    created_at: DateTime!
    updated_at: DateTime!
}

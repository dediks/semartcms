#import */*.graphql

extend type Query {    
    #sihgle data
    test2(id: ID @eq): Test2 @find 

    #all data
    test2s: [Test2!]! @all

    #all data paginate
    test2sPaginate: [Test2!]! @paginate(defaultCount: 10) 

    #get most selected top data
    test2sTop(total: Int!, order_by: String!, director: String!): [Test2!]!
      @paginate(defaultCount: 10)

    #get somme randomized data
    test2GetRandom(total: Int!): [Test2!]! @field(resolver: "Test2Query@getRandom")

    #get some data by paramaters
    test2FindBy(identifier: String!, operator: String!, value: String!): Test2!
      @field(resolver: "Test2Query@findBy")

    #get all data with pagination
    test2sPage(page: Int!, size: Int!): Test2sPage
      @field(resolver: "Test2Query@getPage")
    
    #search a data
    test2sSearch(col_name: String!, kw: String!): [Test2!]!
      @field(resolver: "Test2Query@search")
}


type Test2sPage {
    test2s: [Test2]
    hasMore: Boolean
}

extend type Mutation {
    createTest2(
      	title:String
	price:String
	date:Date

    ): Test2! @create
    
    updateTest2(
      id: ID!
      	title:String
	price:String
	date:Date

      ): Test2 @update

    upsertTest2(
      id: ID! 
      	title:String
	price:String
	date:Date

      ): Test2 @upsert

    deleteTest2(id: ID!): Test2 @delete
}
# type 

type Test2 {
    id: ID!
    	title:String
	price:String
	date:Date

    created_at: DateTime!
    updated_at: DateTime!
}

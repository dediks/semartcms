#import */*.graphql

extend type Query {    
    #sihgle data
    order(id: ID @eq): Order @find 

    #all data
    orders: [Order!]! @all

    #all data paginate
    ordersPaginate: [Order!]! @paginate(defaultCount: 10) 

    #get most selected top data
    ordersTop(total: Int!, order_by: String!, director: String!): [Order!]!
      @paginate(defaultCount: 10)

    #get somme randomized data
    orderGetRandom(total: Int!): [Order!]! @field(resolver: "OrderQuery@getRandom")

    #get some data by paramaters
    orderFindBy(identifier: String!, operator: String!, value: String!): Order!
      @field(resolver: "OrderQuery@findBy")

    #get all data with pagination
    ordersPage(page: Int!, size: Int!): OrdersPage
      @field(resolver: "OrderQuery@getPage")
    
    #search a data
    ordersSearch(col_name: String!, kw: String!): [Order!]!
      @field(resolver: "OrderQuery@search")
}


type OrdersPage {
    orders: [Order]
    hasMore: Boolean
}

extend type Mutation {
    createOrder(
      	invoice_number:String

    ): Order! @create
    
    updateOrder(
      id: ID!
      	invoice_number:String

      ): Order @update

    upsertOrder(
      id: ID! 
      	invoice_number:String

      ): Order @upsert

    deleteOrder(id: ID!): Order @delete
}
# type 

type Order {
    id: ID!
    	invoice_number:String
	customer: Customer@belongsTo
	books: [Book] @belongsToMany

    created_at: DateTime!
    updated_at: DateTime!
}

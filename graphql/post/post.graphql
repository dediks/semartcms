#import */*.graphql

extend type Query {    
    #sihgle data
    post(id: ID @eq): Post @find 

    #all data
    posts: [Post!]! @all

    #all data paginate
    postsPaginate: [Post!]! @paginate(defaultCount: 10) 

    #get most selected top data
    postsTop(total: Int!, order_by: String!, director: String!): [Post!]!
      @paginate(defaultCount: 10)

    #get somme randomized data
    postGetRandom(total: Int!): [Post!]! @field(resolver: "PostQuery@getRandom")

    #get some data by paramaters
    postFindBy(identifier: String!, operator: String!, value: String!): Post!
      @field(resolver: "PostQuery@findBy")

    #get all data with pagination
    postsPage(page: Int!, size: Int!): PostsPage
      @field(resolver: "PostQuery@getPage")
    
    #search a data
    postsSearch(col_name: String!, kw: String!): [Post!]!
      @field(resolver: "PostQuery@search")
}


type PostsPage {
    posts: [Post]
    hasMore: Boolean
}

extend type Mutation {
    createPost(
      	title:String
	body:String

    ): Post! @create
    
    updatePost(
      id: ID!
      	title:String
	body:String

      ): Post @update

    upsertPost(
      id: ID! 
      	title:String
	body:String

      ): Post @upsert

    deletePost(id: ID!): Post @delete
}
# type 

type Post {
    id: ID!
    	title:String
	body:String
	comments: [Comment] @hasMany
	author: Author@belongsTo

    created_at: DateTime!
    updated_at: DateTime!
}
